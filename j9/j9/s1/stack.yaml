version: "3.8"
services:
 redis:
  image: redis:latest
  ports:
   - "6379"
  deploy:
   replicas: 1
   restart_policy:
    condition: on-failure
  networks:
   - frontend

 db:
  image: postgres:latest
  environment:
   POSTGRES_USER: "postgres"
   POSTGRES_PASSWORD: "postgres"
  volumes:
   - db:/var/lib/postgresql/data
  deploy:
   placement:
    constraints: [node.role == manager]
   replicas: 1
   restart_policy:
    condition: on-failure
  networks:
    - backend


 vote:
  image: dockersamples/examplevotingapp_vote:before
  ports:
   - 5000:80
  networks:
    - frontend
  deploy:
   replicas: 1
   restart_policy:
    condition: on-failure
  
 result:
  image: dockersamples/examplevotingapp_result:before
  ports:
   - 5001:80
  networks:
   - backend
  deploy:
   replicas: 1
   restart_policy:
    condition: on-failure


 worker:
  image: dockersamples/examplevotingapp_worker
  networks:
   - backend
   - frontend
  depends_on:
   - redis
   - db
  deploy:
   mode: replicated
   replicas: 1
   restart_policy:
    condition: on-failure
   placement:
    constraints: [node.role == manager]

networks:
 frontend:
  driver: overlay
 backend:
  driver: overlay
  
volumes:
 db:




 


 
